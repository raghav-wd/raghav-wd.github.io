{"version":3,"sources":["components/Models/Person.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Plane","props","usePlane","rotation","Math","PI","mesh","ref","args","color","Person","panel","cameraGuiPanel","direction","THREE","frontVector","sideVector","useEffect","GUI","addFolder","keys","KeyW","KeyS","KeyA","KeyD","Space","moveFieldByKey","key","Model","gltf","useGLTF","useAnimations","animations","actions","mixer","names","clips","useState","forward","backward","left","right","jump","movement","setMovement","handleKeyDown","e","m","code","handleKeyUp","document","addEventListener","removeEventListener","usePlayerControls","velocity","useRef","set","Number","subVectors","normalize","multiplyScalar","useSphere","mass","position","type","api","currentAction","subscribe","v","current","reset","fadeIn","play","fadeOut","useFrame","getWorldPosition","x","z","y","object","scene","dispose","PersonCamera","add","min","max","step","name","PerspectiveCamera","fov","makeDefault","dpr","camera","style","height","width","Stats","showPanel","className","OrbitControls","enablePan","enableZoom","enableRotate","fallback","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cf5c8271.chunk.js","sourcesContent":["/* eslint-disable */\nimport React, { Suspense, useState, useEffect, useRef } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport {\n  Physics,\n  useSphere,\n  usePlane,\n  useBox,\n  Debug,\n  useCylinder,\n} from '@react-three/cannon'\nimport {\n  useGLTF,\n  OrbitControls,\n  useAnimations,\n  PerspectiveCamera,\n  Stats,\n} from '@react-three/drei'\nimport { GUI } from 'dat.gui'\n\nconst Person = () => {\n  const blendDuration = 0.4\n  let panel, personGuiPanel, cameraGuiPanel\n\n  const SPEED = 5\n  const direction = new THREE.Vector3()\n  const frontVector = new THREE.Vector3()\n  const sideVector = new THREE.Vector3()\n  const rotation = new THREE.Vector3()\n  const speed = new THREE.Vector3()\n\n  useEffect(() => {\n    panel = new GUI()\n    personGuiPanel = panel.addFolder('Person')\n    cameraGuiPanel = panel.addFolder('Camera')\n  }, [])\n\n  const keys = { KeyW: \"forward\", KeyS: \"backward\", KeyA: \"left\", KeyD: \"right\", Space: \"jump\" }\n  const moveFieldByKey = (key) => keys[key]\n\n  const usePlayerControls = () => {\n  const [movement, setMovement] = useState({ forward: false, backward: false, left: false, right: false, jump: false })\n  useEffect(() => {\n    const handleKeyDown = (e) => setMovement((m) => ({ ...m, [moveFieldByKey(e.code)]: true }))\n    const handleKeyUp = (e) => setMovement((m) => ({ ...m, [moveFieldByKey(e.code)]: false }))\n    document.addEventListener(\"keydown\", handleKeyDown)\n    document.addEventListener(\"keyup\", handleKeyUp)\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown)\n      document.removeEventListener(\"keyup\", handleKeyUp)\n    }\n  }, [])\n  return movement\n}\n// Importing model\nconst Model = () => {\n  const gltf = useGLTF('./libs/Xbot.glb', '/draco-gltf')\n  const { ref, mixer, names, actions, clips } = useAnimations(gltf.animations)\n  const { forward, backward, left, right, jump } = usePlayerControls()\n  const velocity = useRef([0, 0, 0])\n\n  frontVector.set(0, 0, Number(forward) - Number(backward))\n  sideVector.set(Number(right) - Number(left), 0, 0)\n  direction.subVectors(frontVector, sideVector).normalize().multiplyScalar(SPEED)\n\n    const [mesh, api] = useSphere(() => ({\n      mass: 1,\n      position: [0, 1, 0],\n      type: 'Dynamic',\n    }))\n    const [currentAction, setCurrentAction] = useState('idle')\n\n    useEffect(() => api.velocity.subscribe((v) => (velocity.current = v)), [])\n    \n    useEffect(() => {\n      actions[currentAction]?.reset().fadeIn(blendDuration).play()\n      return () => void actions[currentAction]?.fadeOut(blendDuration)\n    }, [currentAction])\n\n    useFrame(() => {\n      api.velocity.set(0, 0, 1)\n      mesh.current.getWorldPosition(ref.current.position)\n      api.velocity.set(direction.x, velocity.current[1], direction.z)\n      // if (jump && Math.abs(velocity.current[1].toFixed(2)) < 0.05) api.velocity.set(velocity.current[0], 20, velocity.current[2])\n      ref.current.position.y -= 1\n    })\n\n    // useEffect(() => {\n    //   document.addEventListener('keydown', function (event) {\n    //     console.log(\n    //       `Key: ${event.key} with keycode ${event.keyCode} has been pressed`\n    //     )\n    //     switch (event.key) {\n    //       case 'w': {\n    //         ref.current.position.z += 0.04\n    //         setCurrentAction('walk')\n    //         break\n    //       }\n    //       case 'a': {\n    //         ref.current.position.x += 0.04\n    //         break\n    //       }\n    //       case 's': {\n    //         ref.current.position.z -= 0.04\n    //         setCurrentAction('idle')\n    //         break\n    //       }\n    //       case 'd': {\n    //         ref.current.position.x -= 0.04\n    //         break\n    //       }\n    //     }\n    //   })\n\n    //   if (personGuiPanel && personGuiPanel) {\n    //     personGuiPanel\n    //       .add(ref.current.position, 'x')\n    //       .min(0)\n    //       .max(5)\n    //       .step(0.1)\n    //       .name('x')\n    //     personGuiPanel\n    //       .add(ref.current.position, 'y')\n    //       .min(0)\n    //       .max(5)\n    //       .step(0.1)\n    //       .name('y')\n    //     personGuiPanel\n    //       .add(ref.current.position, 'z')\n    //       .min(0)\n    //       .max(5)\n    //       .step(0.05)\n    //       .name('z')\n    //     personGuiPanel.add(ref.current, 'visible')\n    //   }\n    // }, [])\n\n    return (\n      <mesh>\n        <mesh ref={mesh}></mesh>\n        <primitive ref={ref} object={gltf.scene} dispose={null} />\n      </mesh>\n    )\n  }\n\n  function PersonCamera() {\n    const ref = useRef()\n    useEffect(() => {\n      if (cameraGuiPanel) {\n        cameraGuiPanel\n          .add(ref.current.position, 'x')\n          .min(0)\n          .max(5)\n          .step(0.1)\n          .name('x')\n        cameraGuiPanel\n          .add(ref.current.position, 'y')\n          .min(0)\n          .max(5)\n          .step(0.1)\n          .name('y')\n        cameraGuiPanel\n          .add(ref.current.position, 'z')\n          .min(-5)\n          .max(5)\n          .step(0.05)\n          .name('z')\n      }\n    })\n    return (\n      <PerspectiveCamera\n        fov={45}\n        ref={ref}\n        position={[0, 2, -5]}\n        makeDefault // Registers it as the default camera system-wide (default=false)\n      ></PerspectiveCamera>\n    )\n  }\n\n  return (\n    <Canvas\n      dpr={[1, 2]}\n      camera={{ fov: 45 }}\n      style={{ height: '100vh', width: '100%' }}\n    >\n      <Stats\n        showPanel={0} // Start-up panel (default=0)\n        className=\"stats\" // Optional className to add to the stats container dom element\n      />\n      <PersonCamera />\n      <OrbitControls enablePan enableZoom enableRotate />\n      <ambientLight />\n      <axesHelper args={[5]} />\n      {/* <Plane /> */}\n      <Physics>\n        <Debug>\n          <Plane />\n          <Suspense fallback={null}>\n            <Model />\n          </Suspense>\n        </Debug>\n      </Physics>\n    </Canvas>\n  )\n}\n\nfunction Plane(props) {\n  // This reference will give us direct access to the mesh\n  const [mesh] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], ...props }))\n  // console.log(mesh.current.x)\n  return (\n    <mesh ref={mesh} {...props} rotation={[-Math.PI / 2, 0, 0]}>\n      <planeBufferGeometry args={[100, 100]} />\n      <meshStandardMaterial color=\"orange\" />\n    </mesh>\n  )\n}\n\nexport default Person\n","import './App.css'\nimport Person from './components/Models/Person'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Person />\n    </div>\n  )\n}\n\nexport default App\n","import { getLCP, getFID, getCLS, getFCP, getTTFB } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    getCLS(onPerfEntry)\n    getFID(onPerfEntry)\n    getFCP(onPerfEntry)\n    getLCP(onPerfEntry)\n    getTTFB(onPerfEntry)\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}