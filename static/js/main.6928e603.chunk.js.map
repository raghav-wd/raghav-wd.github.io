{"version":3,"sources":["components/MagicRoom.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Rotate","props","ref","useRef","useFrame","state","current","rotation","x","y","MagicRoom","Model","gltf","useGLTF","useAnimations","animations","names","actions","useEffect","play","object","scene","dispose","scale","Math","PI","position","dpr","camera","fov","style","height","width","fallback","OrbitControls","enablePan","enableZoom","enableRotate","Sky","distance","sunPosition","inclination","azimuth","attach","args","Stars","radius","depth","count","factor","saturation","fade","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSA6DA,SAASA,EAAOC,GACd,IAAMC,EAAMC,mBAKZ,OAJAC,aAAS,SAACC,GACRH,EAAII,QAAQC,SAASC,GAAK,KAC1BN,EAAII,QAAQC,SAASE,GAAK,QAErB,mCAAOP,IAAKA,GAASD,IAGfS,MA3DG,WAEhB,IAAMC,EAAQ,WACZ,IAAMC,EAAOC,YAAQ,4CAA4C,GACjE,EAAgCC,YAAcF,EAAKG,YAA3Cb,EAAR,EAAQA,IAAKc,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,QAIpB,OAHAC,qBAAU,WACRD,EAAQD,EAAM,IAAIG,UAGlB,2BACEC,OAAQR,EAAKS,MACbnB,IAAKA,EACLoB,QAAS,KACTC,MAAO,GACPhB,SAAU,CAAC,EAAa,KAAViB,KAAKC,GAAW,GAC9BC,SAAU,CAAC,GAAI,GAAI,MAKzB,OACE,cAAC,IAAD,CACEC,IAAK,CAAC,EAAG,GACTC,OAAQ,CAAEF,SAAU,CAAC,EAAG,EAAG,KAAMG,IAAK,IACtCC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAHnC,SAKE,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAACC,EAAA,EAAD,CAAeC,WAAS,EAACC,YAAU,EAACC,cAAY,IAChD,cAACC,EAAA,EAAD,CACEC,SAAU,IACVC,YAAa,CAAC,EAAG,EAAG,GACpBC,YAAa,EACbC,QAAS,MACX,qBAAKC,OAAO,MAAMC,KAAM,CAAC,UAAW,EAAG,OACvC,cAACjC,EAAD,IACA,cAACX,EAAD,UACE,cAAC6C,EAAA,EAAD,CACAC,OAAQ,EACRC,MAAO,GACPC,MAAO,IACPC,OAAQ,EACRC,WAAY,EACZC,MAAI,YCxCCC,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UAEE,qBAAKA,UAAU,iBAAf,0BACA,cAAC,EAAD,Q,QCISC,EAVS,SAACC,GACnBA,GAAeA,aAAuBC,WACxCC,YAAOF,GACPG,YAAOH,GACPI,YAAOJ,GACPK,YAAOL,GACPM,YAAQN,KCFZO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6928e603.chunk.js","sourcesContent":["/* eslint-disable */\nimport React, { Suspense, useState, useEffect, useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport {\n  useGLTF,\n  OrbitControls,\n  Stars,\n  useAnimations,\n  Sky,\n} from '@react-three/drei'\n\nconst MagicRoom = () => {\n  // Importing model\n  const Model = () => {\n    const gltf = useGLTF('./libs/3_seconds_of_vacations/scene.gltf', true)\n    const { ref, names, actions } = useAnimations(gltf.animations)\n    useEffect(() => {\n      actions[names[0]].play()\n    })\n    return (\n      <primitive\n        object={gltf.scene}\n        ref={ref}\n        dispose={null}\n        scale={10}\n        rotation={[0, Math.PI * 1.18, 0]}\n        position={[0, -20, 0]}\n      />\n    )\n  }\n\n  return (\n    <Canvas\n      dpr={[1, 2]}\n      camera={{ position: [0, 0, 100], fov: 45 }}\n      style={{ height: '100vh', width: '100%' }}\n    >\n      <Suspense fallback={null}>\n        <OrbitControls enablePan enableZoom enableRotate />\n        <Sky\n          distance={250}\n          sunPosition={[3, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n          inclination={0} // Sun elevation angle from 0 to 1 (default=0)\n          azimuth={0.25}/>\n        <fog attach=\"fog\" args={['#ffffff', 0, 300]} />\n        <Model />\n        <Rotate>\n          <Stars\n          radius={8} // Radius of the inner sphere (default=100)\n          depth={50} // Depth of area where stars should fit (default=50)\n          count={50000} // Amount of stars (default=5000)\n          factor={2} // Size factor (default=4)\n          saturation={0} // Saturation 0-1 (default=0)\n          fade // Faded dots (default=false)\n        />\n        </Rotate>\n      </Suspense>\n    </Canvas>\n  )\n}\n\nfunction Rotate(props) {\n  const ref = useRef();\n  useFrame((state) => {\n    ref.current.rotation.x += 0.001\n    ref.current.rotation.y -= 0.002\n  });\n  return <group ref={ref} {...props} />;\n}\n\nexport default MagicRoom\n","import './App.css'\nimport MagicRoom from './components/MagicRoom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <div className=\"text-2 overlay\">&lt;राghaわ/&gt;</div> */}\n      <div className=\"text-2 overlay\">Raghav Gupta</div>\n      <MagicRoom />\n    </div>\n  )\n}\n\nexport default App\n","import { getLCP, getFID, getCLS, getFCP, getTTFB } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    getCLS(onPerfEntry)\n    getFID(onPerfEntry)\n    getFCP(onPerfEntry)\n    getLCP(onPerfEntry)\n    getTTFB(onPerfEntry)\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}