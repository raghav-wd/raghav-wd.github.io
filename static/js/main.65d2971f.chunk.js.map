{"version":3,"sources":["components/Models/Person.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Plane","props","mesh","useRef","rotation","Math","PI","ref","args","color","Person","panel","personGuiPanel","useEffect","GUI","addFolder","Model","gltf","useGLTF","useAnimations","animations","actions","mixer","names","clips","document","addEventListener","event","console","log","key","keyCode","current","position","z","x","add","min","max","step","name","walk","play","object","scene","dispose","PersonCamera","cameraGuiPanel","PerspectiveCamera","fov","makeDefault","dpr","camera","style","height","width","onKeyDown","Stats","showPanel","className","OrbitControls","enablePan","enableZoom","enableRotate","fallback","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4SAsIA,SAASA,EAAMC,GAEb,IAAMC,EAAOC,mBAEb,OACE,iDAAUF,GAAV,IAAiBG,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAA7C,UACE,qCAAqBC,IAAKL,EAAMM,KAAM,CAAC,IAAK,OAC5C,sCAAsBC,MAAM,eAKnBC,MAtIA,WACb,IAAIC,EAAOC,EACIT,mBAEfU,qBAAU,WACRF,EAAQ,IAAIG,IACZF,EAAiBD,EAAMI,UAAU,YAChC,IAGH,IAAMC,EAAQ,WACZ,IAAMC,EAAOC,YAAQ,kBAAmB,eACxC,EAA8CC,YAAcF,EAAKG,YAAzDb,EAAR,EAAQA,IAAmBc,GAA3B,EAAaC,MAAb,EAAoBC,MAApB,EAA2BF,SAA3B,EAAoCG,MAiDpC,OA9CAX,qBAAU,WAERY,SAASC,iBAAiB,WAAW,SAAUC,GAI7C,OAHAC,QAAQC,IAAR,eACUF,EAAMG,IADhB,yBACoCH,EAAMI,QAD1C,sBAGQJ,EAAMG,KACZ,IAAK,IACHvB,EAAIyB,QAAQC,SAASC,GAAK,IAC1B,MAEF,IAAK,IACH3B,EAAIyB,QAAQC,SAASE,GAAK,IAC1B,MAEF,IAAK,IACH5B,EAAIyB,QAAQC,SAASC,GAAK,IAC1B,MAEF,IAAK,IACH3B,EAAIyB,QAAQC,SAASE,GAAK,QAKhCvB,EACGwB,IAAI7B,EAAIyB,QAAQC,SAAU,KAC1BI,IAAI,GACJC,IAAI,GACJC,KAAK,IACLC,KAAK,KACR5B,EACGwB,IAAI7B,EAAIyB,QAAQC,SAAU,KAC1BI,IAAI,GACJC,IAAI,GACJC,KAAK,IACLC,KAAK,KACR5B,EACGwB,IAAI7B,EAAIyB,QAAQC,SAAU,KAC1BI,IAAI,GACJC,IAAI,GACJC,KAAK,KACLC,KAAK,KACR5B,EAAewB,IAAI7B,EAAIyB,QAAS,WAChCX,EAAQoB,KAAKC,UAER,2BAAWnC,IAAKA,EAAKoC,OAAQ1B,EAAK2B,MAAOC,QAAS,QAG3D,SAASC,IACP,IAAMvC,EAAMJ,mBAuBZ,OAtBAU,qBAAU,WACR,IAAIkC,EAAiBpC,EAAMI,UAAU,UACrCa,QAAQC,IAAItB,EAAIyB,SAChBe,EACGX,IAAI7B,EAAIyB,QAAQC,SAAU,KAC1BI,IAAI,GACJC,IAAI,GACJC,KAAK,IACLC,KAAK,KACRO,EACGX,IAAI7B,EAAIyB,QAAQC,SAAU,KAC1BI,IAAI,GACJC,IAAI,GACJC,KAAK,IACLC,KAAK,KACRO,EACGX,IAAI7B,EAAIyB,QAAQC,SAAU,KAC1BI,KAAK,GACLC,IAAI,GACJC,KAAK,KACLC,KAAK,QAGR,cAACQ,EAAA,EAAD,CACEC,IAAK,GACL1C,IAAKA,EACL0B,SAAU,CAAC,EAAG,GAAI,GAClBiB,aAAW,IAMjB,OACE,eAAC,IAAD,CACEC,IAAK,CAAC,EAAG,GACTC,OAAQ,CAAEH,IAAK,IACfI,MAAO,CAAEC,OAAQ,QAASC,MAAO,QACjCC,UAAW,kBAAM5B,QAAQC,IAAI,OAJ/B,UAME,cAAC4B,EAAA,EAAD,CACEC,UAAW,EACXC,UAAU,UAEZ,cAACb,EAAD,IACA,cAACc,EAAA,EAAD,CAAeC,WAAS,EAACC,YAAU,EAACC,cAAY,IAChD,iCACA,4BAAYvD,KAAM,CAAC,KACnB,cAACR,EAAD,IACA,cAAC,WAAD,CAAUgE,SAAU,KAApB,SACE,cAAChD,EAAD,UCrHOiD,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,O,QCMSO,EAVS,SAACC,GACnBA,GAAeA,aAAuBC,WACxCC,YAAOF,GACPG,YAAOH,GACPI,YAAOJ,GACPK,YAAOL,GACPM,YAAQN,KCFZO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnD,SAASoD,eAAe,SAM1BX,M","file":"static/js/main.65d2971f.chunk.js","sourcesContent":["/* eslint-disable */\nimport React, { Suspense, useState, useEffect, useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport {\n  useGLTF,\n  OrbitControls,\n  useAnimations,\n  PerspectiveCamera,\n  Stats,\n} from '@react-three/drei'\nimport { GUI } from 'dat.gui'\n\nconst Person = () => {\n  let panel, personGuiPanel\n  const camera = useRef()\n\n  useEffect(() => {\n    panel = new GUI()\n    personGuiPanel = panel.addFolder('Person')\n  }, [])\n\n  // Importing model\n  const Model = () => {\n    const gltf = useGLTF('./libs/Xbot.glb', '/draco-gltf')\n    const { ref, mixer, names, actions, clips } = useAnimations(gltf.animations)\n\n    // console.log(gltf.scene)\n    useEffect(() => {\n      // console.log(ref)\n      document.addEventListener('keydown', function (event) {\n        console.log(\n          `Key: ${event.key} with keycode ${event.keyCode} has been pressed`\n        )\n        switch (event.key) {\n          case 'w': {\n            ref.current.position.z += 0.04\n            break\n          }\n          case 'a': {\n            ref.current.position.x += 0.04\n            break\n          }\n          case 's': {\n            ref.current.position.z -= 0.04\n            break\n          }\n          case 'd': {\n            ref.current.position.x -= 0.04\n            break\n          }\n        }\n      })\n      personGuiPanel\n        .add(ref.current.position, 'x')\n        .min(0)\n        .max(5)\n        .step(0.1)\n        .name('x')\n      personGuiPanel\n        .add(ref.current.position, 'y')\n        .min(0)\n        .max(5)\n        .step(0.1)\n        .name('y')\n      personGuiPanel\n        .add(ref.current.position, 'z')\n        .min(0)\n        .max(5)\n        .step(0.05)\n        .name('z')\n      personGuiPanel.add(ref.current, 'visible')\n      actions.walk.play()\n    })\n    return <primitive ref={ref} object={gltf.scene} dispose={null} />\n  }\n\n  function PersonCamera() {\n    const ref = useRef()\n    useEffect(() => {\n      let cameraGuiPanel = panel.addFolder('Camera')\n      console.log(ref.current)\n      cameraGuiPanel\n        .add(ref.current.position, 'x')\n        .min(0)\n        .max(5)\n        .step(0.1)\n        .name('x')\n      cameraGuiPanel\n        .add(ref.current.position, 'y')\n        .min(0)\n        .max(5)\n        .step(0.1)\n        .name('y')\n      cameraGuiPanel\n        .add(ref.current.position, 'z')\n        .min(-5)\n        .max(5)\n        .step(0.05)\n        .name('z')\n    })\n    return (\n      <PerspectiveCamera\n        fov={45}\n        ref={ref}\n        position={[0, 2, -5]}\n        makeDefault // Registers it as the default camera system-wide (default=false)\n        // {...props} // All THREE.PerspectiveCamera props are valid\n      ></PerspectiveCamera>\n    )\n  }\n\n  return (\n    <Canvas\n      dpr={[1, 2]}\n      camera={{ fov: 45 }}\n      style={{ height: '100vh', width: '100%' }}\n      onKeyDown={() => console.log('hi')}\n    >\n      <Stats\n        showPanel={0} // Start-up panel (default=0)\n        className=\"stats\" // Optional className to add to the stats container dom element\n      />\n      <PersonCamera />\n      <OrbitControls enablePan enableZoom enableRotate />\n      <ambientLight />\n      <axesHelper args={[5]} />\n      <Plane />\n      <Suspense fallback={null}>\n        <Model />\n      </Suspense>\n    </Canvas>\n  )\n}\n\nfunction Plane(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // console.log(mesh.current.x)\n  return (\n    <mesh {...props} rotation={[-Math.PI / 2, 0, 0]}>\n      <planeBufferGeometry ref={mesh} args={[100, 100]} />\n      <meshStandardMaterial color=\"orange\" />\n    </mesh>\n  )\n}\n\nexport default Person\n","import './App.css'\nimport Person from './components/Models/Person'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Person />\n    </div>\n  )\n}\n\nexport default App\n","import { getLCP, getFID, getCLS, getFCP, getTTFB } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    getCLS(onPerfEntry)\n    getFID(onPerfEntry)\n    getFCP(onPerfEntry)\n    getLCP(onPerfEntry)\n    getTTFB(onPerfEntry)\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}