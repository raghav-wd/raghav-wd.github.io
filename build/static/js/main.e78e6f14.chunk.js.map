{"version":3,"sources":["components/MagicRoom.jsx","components/Overlay.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["MagicRoom","Model","gltf","useGLTF","useAnimations","animations","ref","names","actions","useEffect","play","object","scene","dispose","scale","rotation","Math","PI","position","dpr","linear","camera","fov","style","height","width","fallback","attach","args","Billboard","Stars","radius","depth","count","factor","saturation","fade","Overlay","className","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAoDeA,EA/CG,WAEhB,IAAMC,EAAQ,WACZ,IAAMC,EAAOC,YAAQ,4CAA4C,GACjE,EAAgCC,YAAcF,EAAKG,YAA3CC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,QAIpB,OAHAC,qBAAU,WACVD,EAAQD,EAAM,IAAIG,UAGhB,2BACEC,OAAQT,EAAKU,MACbN,IAAKA,EACLO,QAAS,KACTC,MAAO,EACPC,SAAU,CAAC,EAAa,KAAVC,KAAKC,GAAW,GAC9BC,SAAU,CAAC,GAAI,GAAI,MAKzB,OACE,cAAC,IAAD,CACEC,IAAK,CAAC,EAAG,GACTC,QAAM,EACNC,OAAQ,CAAEH,SAAU,CAAC,EAAG,EAAG,KAAMI,IAAK,IACtCC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAJnC,SAME,eAAC,WAAD,CAAUC,SAAU,KAApB,UAGE,qBAAKC,OAAO,MAAMC,KAAM,CAAC,UAAW,EAAG,OACvC,cAACC,EAAA,EAAD,UACA,cAAC5B,EAAD,MAEE,cAAC6B,EAAA,EAAD,CACAC,OAAQ,EACRC,MAAO,GACPC,MAAO,IACPC,OAAQ,EACRC,WAAY,EACZC,MAAI,UCrCCC,EARC,kBACR,sBAAKC,UAAU,OAAf,UACA,2CACA,uBAAM,uBACN,8CC0BOC,MA1Bf,WACE,OACE,sBAAKD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,2B,QCbSE,EAVS,SAACC,GACnBA,GAAeA,aAAuBC,WACxCC,YAAOF,GACPG,YAAOH,GACPI,YAAOJ,GACPK,YAAOL,GACPM,YAAQN,KCFZO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e78e6f14.chunk.js","sourcesContent":["import React, { Suspense, useEffect } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport * as THREE from'three'\nimport { useGLTF, Stars, useAnimations, Sky, Html, OrbitControls, Billboard } from '@react-three/drei'\n\nconst MagicRoom = () => {\n  // Importing model\n  const Model = () => {\n    const gltf = useGLTF('./libs/3_seconds_of_vacations/scene.gltf', true)\n    const { ref, names, actions } = useAnimations(gltf.animations)\n    useEffect(() => {\n    actions[names[0]].play()\n  })\n    return (\n      <primitive\n        object={gltf.scene}\n        ref={ref}\n        dispose={null}\n        scale={8}\n        rotation={[0, Math.PI * 1.18, 0]}\n        position={[0, -13, 0]}\n      />\n    )\n  }\n\n  return (\n    <Canvas\n      dpr={[1, 2]}\n      linear\n      camera={{ position: [0, 0, 100], fov: 45 }}\n      style={{ height: '100vh', width: '100%' }}\n    >\n      <Suspense fallback={null}>\n        {/* <OrbitControls mouseButtons={{ \"Left\": null}} touches={{\"ONE\": THREE.TOUCH.DOLLY_PAN}} autoRotate enableScroll={false} enablePan={false} enableZoom={false} maxPolarAngle={Math.PI / 200} minPolarAngle={Math.PI / 20} /> */}\n        {/* <Sky azimuth={1} inclination={0.6} distance={1000} /> */}\n        <fog attach=\"fog\" args={['#ffffff', 0, 300]} />\n        <Billboard>\n        <Model />\n        </Billboard>\n          <Stars\n          radius={8} // Radius of the inner sphere (default=100)\n          depth={50} // Depth of area where stars should fit (default=50)\n          count={10000} // Amount of stars (default=5000)\n          factor={2} // Size factor (default=4)\n          saturation={0} // Saturation 0-1 (default=0)\n          fade // Faded dots (default=false)\n        />\n      </Suspense>\n    </Canvas>\n  )\n}\n\nexport default MagicRoom\n","const Overlay = () => (\r\n        <div className=\"text\">\r\n        <span>Hi, I&apos;m</span>\r\n        <br /><br />\r\n        <span>Raghav</span>\r\n      </div>\r\n)\r\n    \r\nexport default Overlay","import './App.css'\nimport MagicRoom from './components/MagicRoom'\nimport Overlay from './components/Overlay'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Overlay />\n      <MagicRoom />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n    </div>\n  )\n}\n\nexport default App\n","import { getLCP, getFID, getCLS, getFCP, getTTFB } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    getCLS(onPerfEntry)\n    getFID(onPerfEntry)\n    getFCP(onPerfEntry)\n    getLCP(onPerfEntry)\n    getTTFB(onPerfEntry)\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}